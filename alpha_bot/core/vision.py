# core/vision.py
import numpy as np
from ultralytics import YOLO
import mss
from PIL import Image
import cv2
import time
import os


class Vision:
    def __init__(self, model_path=r"D:/mob_detector/mob_detector/yolov8n_mob22/weights/best.pt"):
        self.model = YOLO(model_path)
        self.screen_center = (960, 540)
        self.prev_mob_hp_width = None  # –ü–∞–º‚Äô—è—Ç—å –ø—Ä–æ —à–∏—Ä–∏–Ω—É HP –º–æ–±–∞

    def grab_screen(self):
        with mss.mss() as sct:
            monitor = {"top": 0, "left": 0, "width": 1920, "height": 1080}
            img = sct.grab(monitor)
            return Image.frombytes("RGB", img.size, img.rgb)

    def grab_screen_v2(self):
        with mss.mss() as sct:
            monitor = {"top": 0, "left": 0, "width": 1920, "height": 1080}
            img = sct.grab(monitor)
            return img

    def detect(self, image):
        results = self.model.predict(image, conf=0.4, save=False, verbose=False)
        return results[0]

    def find_nearest(self, results, target_class='mob'):
        mobs = []
        for box, cls in zip(results.boxes.xyxy, results.boxes.cls):
            name = results.names[int(cls)]
            if name == target_class:
                x1, y1, x2, y2 = box
                cx, cy = int((x1 + x2) / 2), int((y1 + y2) / 2)
                dist = abs(cx - self.screen_center[0]) + abs(cy - self.screen_center[1])
                mobs.append((dist, (cx, cy)))
        if mobs:
            mobs.sort(key=lambda x: x[0])
            nearest = mobs[0][1]
            print(f"üéØ –ù–∞–π–±–ª–∏–∂—á–∏–π –º–æ–±: {nearest}")
            return nearest
        else:
            print("‚ö†Ô∏è –ú–æ–±—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None

    def is_my_hp_low(self, results, class_name='my_HP'):
        for box, cls in zip(results.boxes.xyxy, results.boxes.cls):
            if results.names[int(cls)] == class_name:
                x1, _, x2, _ = box
                width = x2 - x1
                if width < 100:
                    print(f"‚ù§Ô∏è HP –≥–µ—Ä–æ—è –Ω–∏–∑—å–∫–∏–π: —à–∏—Ä–∏–Ω–∞ {width}")
                    return True
        return False

    def is_hp_bar_present(self, results, class_name='target_HP'):
        self.save_frame(results)
        return any(results.names[int(cls)] == class_name for cls in results.boxes.cls)

    def is_target_hp_low_or_dead(self, results, class_name='target_HP'):
        """
        –í—ñ–¥—Å—Ç–µ–∂—É—î —à–∏—Ä–∏–Ω—É HP –º–æ–±–∞. –ü–æ–≤–µ—Ä—Ç–∞—î:
        - 'dead' —è–∫—â–æ HP-bar –∑–Ω–∏–∫
        - 'low' —è–∫—â–æ HP < 100
        - 'ok' —è–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
        """
        for box, cls in zip(results.boxes.xyxy, results.boxes.cls):
            if results.names[int(cls)] == class_name:
                x1, _, x2, _ = box
                width = x2 - x1
                print(f"üìâ HP –º–æ–±–∞: {width:.1f}px")

                if self.prev_mob_hp_width is not None:
                    if width < self.prev_mob_hp_width:
                        print(f"‚¨áÔ∏è HP –∑–º–µ–Ω—à–∏–ª–æ—Å—å: –±—É–ª–æ {self.prev_mob_hp_width:.1f}, —Å—Ç–∞–ª–æ {width:.1f}")

                self.prev_mob_hp_width = width

                if width < 100:
                    return 'low'

                return 'ok'

        # HP-bar –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        print("üíÄ –ú–æ–± –º–µ—Ä—Ç–≤–∏–π: HP-bar –∑–Ω–∏–∫")
        self.save_death_frame(results)
        self.prev_mob_hp_width = None
        return 'dead'

    def save_death_frame(self, results):
        img = results.orig_img.copy()
        annotated = results.plot()

        os.makedirs("death_logs", exist_ok=True)
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        path = f"death_logs/death_{timestamp}.jpg"

        cv2.imwrite(path, annotated)
        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–∫—Ä—ñ–Ω —Å–º–µ—Ä—Ç—ñ –º–æ–±–∞: {path}")

    def save_frame(self, results):
        img = results.orig_img.copy()
        annotated = results.plot()

        os.makedirs("frame_logs", exist_ok=True)
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        path = f"frame_logs/frame_{timestamp}.jpg"

        cv2.imwrite(path, annotated)

    def get_red_fill_percentage(self,img, x1, y1, x2, y2):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∞—Å–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
        –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.

        :param image_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
        :param x1, y1: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
        :param x2, y2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
        :return: –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        img_np = np.array(img)
        image = cv2.cvtColor(img_np, cv2.COLOR_BGRA2BGR)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        height, width, _ = image.shape
        if not (0 <= x1 < x2 <= width and 0 <= y1 < y2 <= height):
            print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.")
            return None

        # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ (ROI)
        roi = image[y1:y2, x1:x2]

        # –ï—Å–ª–∏ ROI –ø—É—Å—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        if roi.shape[0] == 0 or roi.shape[1] == 0:
            print("–û—à–∏–±–∫–∞: –û–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø—É—Å—Ç–∞.")
            return 0.0

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ROI –≤ HSV
        hsv_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ HSV
        # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–≤—É—Ö –∫–æ–Ω—Ü–∞—Ö —Å–ø–µ–∫—Ç—Ä–∞ HSV
        lower_red1 = np.array([0, 100, 100])
        upper_red1 = np.array([10, 255, 255])
        lower_red2 = np.array([160, 100, 100])
        upper_red2 = np.array([179, 255, 255])

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        mask1 = cv2.inRange(hsv_roi, lower_red1, upper_red1)
        mask2 = cv2.inRange(hsv_roi, lower_red2, upper_red2)
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –º–∞—Å–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        red_mask = cv2.bitwise_or(mask1, mask2)

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –≤ ROI
        # red_mask –±—É–¥–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (0 –∏–ª–∏ 255).
        # Non-zero count –≤–µ—Ä–Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 255 (–∫—Ä–∞—Å–Ω—ã–µ).
        num_red_pixels = cv2.countNonZero(red_mask)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –≤ ROI
        total_pixels_in_roi = roi.shape[0] * roi.shape[1]

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if total_pixels_in_roi == 0:
            return 0.0
        percentage = (num_red_pixels / total_pixels_in_roi) * 100

        return percentage

    def get_HP_persantge_mob(self,image):
         # –•–ü –º–æ–±–∞
         rect_x1, rect_y1, rect_x2, rect_y2 = 786, 2, 1132, 7
         return self.get_red_fill_percentage(image, rect_x1, rect_y1, rect_x2, rect_y2)

    def get_HP_persantge_pers(self, image):
         # –•–ü –ø–µ—Ä—Å–∞
         rectp_x1, rectp_y1, rectp_x2, rectp_y2 = 29, 58, 240, 60
         return self.get_red_fill_percentage(image, rectp_x1, rectp_y1, rectp_x2, rectp_y2)


